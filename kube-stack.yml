# -----------------------------------------------------------------------------
# Copyright [2024] [Rampart AI, Inc.]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# -----------------------------------------------------------------------------




---
AWSTemplateFormatVersion: '2010-09-09'
Description: Provisions a Kubernetes deployment with a managed EKS control plane and two lightweight worker nodes.

###########################
### Template Parameters ###
###########################
Parameters:

  StackName: # NOTE: no default value i.e., mandatory
    Type: String
    Description: A human-readable name for the service.

  ###############
  # node config #
  ###############
  NodeAmi: # NOTE: no default value i.e., mandatory
    Type: String
    Description: EC2 Node Amazon Image Id
  NodeInstanceType:
    Type: String
    Description: EC2 instance type for worker nodes
    Default: t3.small
  NodeGroupName:
    Type: String
    Description: EKS node group name
    Default: MyNodeGroup

  ##################
  # cluster config #
  ##################
  ClusterName:
    Type: String
    Default: 'MyClusterName'
    Description: Name of the EKS cluster
  ClusterVersion:
    Type: String
    Description: EKS Cluster version
    Default: '1.29'
  DesiredCapacity:
    Type: Number
    Description: Desired number of worker nodes
    Default: 2
    MinValue: 1
    MaxValue: 10

  ##############
  # VPC config #
  ##############
  VpcBlock:
    Type: String
    Default: 10.0.0.0/16
    Description: The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.
  PublicSubnet01Block:
    Type: String
    Default: 10.0.1.0/24
    Description: CidrBlock for public subnet 01 within the VPC
  PublicSubnet02Block:
    Type: String
    Default: 10.0.2.0/24
    Description: CidrBlock for public subnet 02 within the VPC
  PrivateSubnet01Block:
    Type: String
    Default: 10.0.128.0/24
    Description: CidrBlock for private subnet 01 within the VPC
  PrivateSubnet02Block:
    Type: String
    Default: 10.0.129.0/24
    Description: CidrBlock for private subnet 02 within the VPC

  #########################
  # security group config # NOTE: strictly for example/debugging purposes since we will 
  #########################        eventually expose the service using a loadbalancer.
  QuakeListenPort:
    Type: Number
    Default: 31337
    Description: The quakejs listen port.
  QuakeWebsocketPort:
    Type: Number
    Default: 27960
    Description: The quakejs websocket port.
  QuakeClientCidrIp:
    Type: String
    Default: 203.0.113.0/24 # see https://www.rfc-editor.org/rfc/rfc5737
    Description: Acceptable CIDR for quakejs clients.

  ########
  # misc #
  ########
  AwsPartition:
    Type: String
    Description: AWS partition. Typically aws or aws-us-gov.
    Default: aws

############################
### Resource definitions ###
############################
Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub '${StackName}-VPC'

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public Subnets
      - Key: Network
        Value: Public

  PrivateRouteTable01:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Subnet AZ1
      - Key: Network
        Value: Private01

  PrivateRouteTable02:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Subnet AZ2
      - Key: Network
        Value: Private02

  PublicRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRoute01:
    DependsOn:
    - VPCGatewayAttachment
    - NatGateway01
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable01
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway01

  PrivateRoute02:
    DependsOn:
    - VPCGatewayAttachment
    - NatGateway02
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable02
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway02

  NatGateway01:
    DependsOn:
    - NatGatewayEIP1
    - PublicSubnet01
    - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NatGatewayEIP1.AllocationId'
      SubnetId: !Ref PublicSubnet01
      Tags:
      - Key: Name
        Value: !Sub '${StackName}-NatGatewayAZ1'

  NatGateway02:
    DependsOn:
    - NatGatewayEIP2
    - PublicSubnet02
    - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NatGatewayEIP2.AllocationId'
      SubnetId: !Ref PublicSubnet02
      Tags:
      - Key: Name
        Value: !Sub '${StackName}-NatGatewayAZ2'

  NatGatewayEIP1:
    DependsOn:
    - VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGatewayEIP2:
    DependsOn:
    - VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Public Subnet 01
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select: 
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PublicSubnet01Block # '10.0.1.0/24'
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${StackName}-PublicSubnet01"
      - Key: kubernetes.io/role/elb
        Value: 1

  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Public Subnet 02
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PublicSubnet02Block # '10.0.2.0/24'
      VpcId: 
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${StackName}-PublicSubnet02"
      - Key: kubernetes.io/role/elb
        Value: 1

  PrivateSubnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 03
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PrivateSubnet01Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${StackName}-PrivateSubnet01"
      - Key: kubernetes.io/role/internal-elb
        Value: 1

  PrivateSubnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Private Subnet 02
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PrivateSubnet02Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${StackName}-PrivateSubnet02"
      - Key: kubernetes.io/role/internal-elb
        Value: 1

  PublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet01
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet02
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet01 #SubnetA
      RouteTableId: !Ref PrivateRouteTable01

  PrivateSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet02 #SubnetB
      RouteTableId: !Ref PrivateRouteTable02

  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the ECS containers
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref QuakeListenPort
          ToPort: !Ref QuakeListenPort
          CidrIp: !Ref QuakeClientCidrIp
        - IpProtocol: tcp
          FromPort: !Ref QuakeWebsocketPort
          ToPort: !Ref QuakeWebsocketPort
          CidrIp: !Ref QuakeClientCidrIp




  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      Version: !Ref ClusterVersion
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref ControlPlaneSecurityGroup
        SubnetIds:
        - !Ref PrivateSubnet01
        - !Ref PrivateSubnet02

  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ClusterName}-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AwsPartition}:iam::aws:policy/AmazonEKSClusterPolicy

  NodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: NodeInstanceRole

  NodeInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref NodeInstanceType
      SecurityGroupIds: 
        - !Ref ControlPlaneSecurityGroup
      ImageId: !Ref NodeAmi
      IamInstanceProfile: !Ref NodeInstanceProfile
      SubnetId: !Ref PrivateSubnet01
      UserData:
        Fn::Base64: |
          #!/bin/bash
          set -o xtrace
          /etc/eks/bootstrap.sh MyClusterName --kubelet-extra-args "--node-labels=eks.amazonaws.com/nodegroup=MyNodeGroup"
      Tags:
        - Key: Name
          Value: EKS-NodeA

  NodeInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref NodeInstanceType
      SecurityGroupIds: 
        - !Ref ControlPlaneSecurityGroup
      ImageId: !Ref NodeAmi
      IamInstanceProfile: !Ref NodeInstanceProfile
      SubnetId: !Ref PrivateSubnet02
      UserData:
        Fn::Base64: |
          #!/bin/bash
          set -o xtrace
          /etc/eks/bootstrap.sh MyClusterName --kubelet-extra-args "--node-labels=eks.amazonaws.com/nodegroup=MyNodeGroup"
      Tags:
        - Key: Name
          Value: EKS-NodeB

  NodeGroup:
    Type: AWS::EKS::Nodegroup
    DependsOn: EKSCluster
    Properties:
      ClusterName: !Ref ClusterName
      NodegroupName: !Ref NodeGroupName
      NodeRole: !GetAtt NodeInstanceRole.Arn
      Subnets: 
      - !Ref PrivateSubnet01
      - !Ref PrivateSubnet02
      ScalingConfig:
        DesiredSize: !Ref DesiredCapacity
        MinSize: 1
        MaxSize: 10
      InstanceTypes:
        - !Ref NodeInstanceType

  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ClusterName}-node-instance-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AwsPartition}:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - !Sub arn:${AwsPartition}:iam::aws:policy/AmazonEKS_CNI_Policy
        - !Sub arn:${AwsPartition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly


Outputs:
  EKSClusterName:
    Value: !Ref EKSCluster

  VPCId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref VPC
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'VPCId' ] ]

  PublicSubnet01:
    Description: Public subnet one
    Value: !Ref 'PublicSubnet01'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnet01' ] ]

  PublicSubnet02:
    Description: Public subnet two
    Value: !Ref 'PublicSubnet02'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnet02' ] ]

  SecurityGroups:
    Description: Security group for the cluster control plane communication with worker nodes
    Value: !Join [ ",", [ !Ref ControlPlaneSecurityGroup ] ]



